/**
 *    This code was generated by JSTP CodeGen version {{ model.Info.Version }}
 *
 *    Generate info:
 *        Date      : {{ model.Info.DateTime }}
 *        User      : {{ model.Info.UserName }}
 *        Domain    : {{ model.Info.UserDomain }}
 *  Paths:
{% for ifc in model.Interfaces -%}
 *
 *      ======== {{ ifc.Title }} ========
 *      {{ ifc.BasePath}}: {{ ifc.Name }} {{ ifc.Version }}
{% for path in ifc.Paths -%}
 *        {{ ifc.BasePath }}.{{ path.Path }} : {{ path.Title }}
{% endfor -%}
{% endfor -%}
*/

#include "jstp_gen.h"
{% for ifc in model.Interfaces -%}

//======================================================================
//
//                  {{ ifc.Title }}
// 
//======================================================================

{% for path in ifc.Paths -%}
/**
 * {{ ifc.BasePath }}.{{ path.Path }}
 * {{ path.Title }}
 * Arg      : {{ path.Args.Name }}
 * Result   : {{ path.Result.Name }}
 */
static int jstp_{{ ifc.BasePath }}_{{ path.Path }}(char *path_str, char* arg_str, jsmntok_t *arg_tokens, size_t args_token_count)
{
    // ======= BEGIN ARGS =======
{% case path.Args.Type %}
{% when 'Integer' %}
    long longArg;
    if (!jstp_rx_long(arg_str,arg_tokens,&longArg)) return JSTP_ARGS_ERROR;
{% when 'Real' %}
    float value;
    if (!jstp_rx_float(arg_str,arg_tokens,&value)) return JSTP_ARGS_ERROR;
{% when 'Bool' %}
    int boolArg;
    if (!jstp_rx_bool(arg_str,arg_tokens,&boolArg)) return JSTP_ARGS_ERROR;
    if (boolArg)
    {
        // true
    }else
    {
        // false
    };
{% when 'Null' %}   // Null
{% when 'String' %}   // string
    char * str;
    size_t str_len;
    if (!jstp_rx_str(arg_str,arg_tokens,&str,&str_len)) return JSTP_ARGS_ERROR;
    // WARNING!!! now <str> - NOT null-terminated string! It is pointer to char array with <str_len> characters count
{% when 'Array' %}
    // Array
    size_t size;
    if (!jstp_rx_array(arg_str,arg_tokens++,&size)) return JSTP_ARGS_ERROR;
    while(size--)
    {
{% include 'argArray' %}
    }
{% when 'Object' %}
    // {{ path.Args.Name }}
    size_t size;
    if (!jstp_rx_obj(arg_str,arg_tokens++,&size)) return JSTP_ARGS_ERROR;
    while(size--)
    {
{% for prop in path.Args.Properties -%}
{% include 'argObject' %}
{% endfor -%}
        else return JSTP_ARGS_ERROR;
        arg_tokens++;
    }
{% when 'Enum' %}
{% for enumItem in path.Result.Items -%}
{% if forloop.first %}    if (jstp_rx_cmp_str(arg_str,arg_tokens,"{{ enumItem.Name }}")) // <- {{ enumItem.Title }}
{% else %}    else if (jstp_rx_cmp_str(arg_str,arg_tokens,"{{ enumItem.Name }}")) // <- {{ enumItem.Title }}
{% endif %}    {
        // {{ enumItem.Title }}
    }
{% endfor -%}
    else return JSTP_ARGS_ERROR; 
{% else %}
     // UNKNOWN TYPE
{% endcase %}
    // ======= END ARGS =======


    // BY DEFAULT RETURN 'NOT IMPLEMENTED'
    return JSTP_ITEM_NOT_IMPLEMENTED;    // <- REMOVE THIS



    // ======= BEGIN RESULT =======
    jstp_tx_begin();                // <- {"OK":
{% case path.Result.Type %}
{% when 'Integer' %}    // jstp_tx_long(<long>);        // <- {{ path.Result.Name }}
{% when 'Real' %}
    // jstp_tx_float(<float>);        // <- {{ path.Result.Name }}
{% when 'Bool' %}
    // jstp_tx_bool(<int>);        // <- {{ path.Result.Name }}
{% when 'Null' %}
    // jstp_tx_null(); 
{% when 'String' %}    // jstp_tx_str(<str>);       // <- {{ path.Result.Name }}
{% when 'Object' %}
    // {{ path.Result.Name }}
    jstp_tx_obj_begin();            // <- {
{% for prop in path.Result.Properties -%}
{% include 'resObject' %}
{% endfor -%}
    jstp_tx_obj_end();
{% when 'Enum' %}{% for enumItem in path.Result.Items -%}
{% if forloop.first %}    jstp_tx_str("{{ enumItem.Name }}");       // <- {{ enumItem.Title }}
{% else %}    //jstp_tx_str("{{ enumItem.Name }}");       // <- {{ enumItem.Title }}
{% endif %}{% endfor -%}
{% else %}
    // UNKNOWN TYPE
{% endcase %}    jstp_tx_end();        // <- }\n
    return JSTP_NO_ERROR; // <- SUCCESS
    // ======= END RESULT =======


{% for err in path.Errors -%}
    // {{ err.Title }}
    // {{ err.Desc }}
    // return {{ err.Code }};
{% endfor -%}

}

{% endfor -%}

{% endfor -%}

static int jstp__root_path(char *path_str, char* arg_str, jsmntok_t *arg_tokens, size_t args_token_count)
{
    jstp_tx_begin();
    jstp_tx_array_begin();
{% for ifc in model.Interfaces -%}
    jstp_tx_str("{{ ifc.BasePath }}");
{% unless forloop.last %}   jstp_tx_array_end_item();
{% endunless %}{% endfor -%}    
    jstp_tx_array_end();
    jstp_tx_end();
    return JSTP_NO_ERROR;
}

{% for ifc in model.Interfaces -%}

/**
 * {{ ifc.BasePath }} : {{ ifc.Name }} {{ ifc.Version }}
 * {{ ifc.Title }}
 */

static int jstp_{{ ifc.BasePath }}(char *path_str, char* arg_str, jsmntok_t *arg_tokens, size_t args_token_count)
{
    jstp_tx_begin();
    jstp_tx_array_begin();

    jstp_tx_str("{{ ifc.Name }} {{ ifc.Version }}");
    

{% for path in ifc.Paths -%}
    jstp_tx_array_end_item();
    jstp_tx_str("{{ path.Path }}");
{% endfor -%}

    jstp_tx_array_end();
    jstp_tx_end();
    return JSTP_NO_ERROR;
}

{% endfor -%}

int jstp_execute_gen(char *path_str, char* arg_str, jsmntok_t *arg_tokens, size_t args_token_count)
{
    if (jstp_str_compare(path_str,""))
    {
        return jstp__root_path(path_str,arg_str,arg_tokens,args_token_count);
    }


{% for ifc in model.Interfaces -%}
    if (jstp_str_compare(path_str,"{{ ifc.BasePath }}"))
    {
        return jstp_{{ ifc.BasePath }}(path_str,arg_str,arg_tokens,args_token_count);
    }
{% for path in ifc.Paths -%}
    if (jstp_str_compare(path_str,"{{ ifc.BasePath | DownCase  }}.{{ path.Path | DownCase  }}"))
    {
        return jstp_{{ ifc.BasePath }}_{{ path.Path }}(path_str,arg_str,arg_tokens,args_token_count);
    }
            
{% endfor -%}
{% endfor -%}

        
    return JSTP_PATH_NOT_FOUND;
}




